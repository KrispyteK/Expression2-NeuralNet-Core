-- E2Helper.Descriptions["createCurve(vvv)"] = "Creates a quadratic bezier curve based on the input positions"
-- E2Helper.Descriptions["createCurve(vvvv)"] = "Creates a cubic bezier curve based on the input positions"
-- E2Helper.Descriptions["end(xcr:)"] = "Returns the end point of a curve"
-- E2Helper.Descriptions["start(xcr:)"] = "Returns the starting point of a curve"
-- E2Helper.Descriptions["length(xcr:)"] = "Calculates the length of a curve over 100 points"
-- E2Helper.Descriptions["length(xcr:n)"] = "Calculates the length of a curve over p points"
-- E2Helper.Descriptions["tangent(xcr:n)"] = "Returns the non-normalized tangent of a curve at t"
-- E2Helper.Descriptions["get(xcr:n)"] = "Returns the position of control point i"
-- E2Helper.Descriptions["set(xcr:nv)"] = "Sets the position of control point i"
-- E2Helper.Descriptions["point(xcr:n)"] = "Returns the position on the curve based on t"
-- E2Helper.Descriptions["closestPoint(xcr:v)"] = "Returns the closest point on the curve to t"
-- E2Helper.Descriptions["closestPoint(xcr:vn)"] = "Returns the closest point on the curve to t over p points"
-- E2Helper.Descriptions["getLUT(xcr:n)"] = "Returns a look-up table (or array in this case) of points on the curve. The amount of points is determined by 'steps'"
-- E2Helper.Descriptions["equidistantLUT(xcr:n)"] = "Returns a look-up table (or array in this case) of points on the curve. Every point is 'd' units away from the previous one."
-- E2Helper.Descriptions["equidistantLUT(xcr:nn)"] = "Returns a look-up table (or array in this case) of points on the curve. Every point is 'd' units away from the previous one. Calculated with 'p' amount of precision (higher p = more precision, slower performance)"
-- E2Helper.Descriptions["equidistantLUT(xcr:nnn)"] = "Returns a look-up table (or array in this case) of points on the curve. Every point is 'd' units away from the previous one. Calculated with 'p' amount of precision (higher p = more precision, slower performance). 'c' == 1; clamp to 1 on the curve, else continue on"
-- E2Helper.Descriptions["getTangentLUT(xcr:n)"] = "Returns a look-up table (or array in this case) of points on the curve. The amount of points is determined by 'steps'"
-- E2Helper.Descriptions["equidistantTangentLUT(xcr:n)"] = "Returns a look-up table (or array in this case) of tangents on the curve. Every tangent is 'd' units away from the previous one."
-- E2Helper.Descriptions["equidistantTangentLUT(xcr:nn)"] = "Returns a look-up table (or array in this case) of tangents on the curve. Every tangent is 'd' units away from the previous one. Calculated with 'p' amount of precision (higher p = more precision, slower performance)"
-- E2Helper.Descriptions["equidistantTangentLUT(xcr:nnn)"] = "Returns a look-up table (or array in this case) of tangents on the curve. Every tangent is 'd' units away from the previous one. Calculated with 'p' amount of precision (higher p = more precision, slower performance). 'c' == 1; clamp to 1 on the curve, else continue on"
-- E2Helper.Descriptions["getOffset(xcr:nnv)"] = "Returns an offset position based on the given normal"
-- E2Helper.Descriptions["getOffset(xcr:nn)"] = "Returns an offset position based on a vector going up"